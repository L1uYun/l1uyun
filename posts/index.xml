<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on l1uyun☁️</title><link>https://l1uyun.one/posts/</link><description>Recent content in Posts on l1uyun☁️</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 25 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://l1uyun.one/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>javasec-sql注入</title><link>https://l1uyun.one/posts/2024/07/javasec-sql%E6%B3%A8%E5%85%A5/</link><pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate><guid>https://l1uyun.one/posts/2024/07/javasec-sql%E6%B3%A8%E5%85%A5/</guid><description>javasec-sql注入 前置知识 sql注入 没有对用户的输入进行处理(过滤,黑名单,SQL预编译),直接将输入拼接到了sql语句中, 导致执行</description><content type="html"><![CDATA[<h1 id="javasec-sql注入">javasec-sql注入</h1>
<h2 id="前置知识">前置知识</h2>
<h3 id="sql注入">sql注入</h3>
<p>没有对用户的输入进行处理(过滤,黑名单,SQL预编译),直接将输入拼接到了sql语句中,
导致执行了用户构造的恶意SQL语句
SQL注入的语法与使用的数据库相关,与语言无关</p>
<h3 id="java数据库操作">java数据库操作</h3>
<h4 id="jdbc">jdbc</h4>
<p>java database connection
java提供的数据库驱动库,用于进行数据库连接,执行SQL语句
JDBC有两个方法执行SQL语句，分别是PrepareStatement和Statement。</p>
<h4 id="hibernate">Hibernate</h4>
<p>Hibernate是一个对象关系映射（ORM）框架，它将Java对象与数据库表进行映射，使开发者可以使用面向对象的编程方式来操作数据库。
Hibernate能够将Java类自动映射到数据库表上，并且能够自动生成SQL语句来操作数据库，减少了手动编写SQL的繁琐工作。</p>
<h4 id="mybatis">Mybatis</h4>
<p>Mybatis是一个持久层框架，它通过消除几乎所有的JDBC代码和手动设置参数及获取结果集的工作来简化对数据库的操作。Mybatis可以通过XML或注解的方式将要执行的SQL、参数和结果映射进行配置。</p>
<p>Mybatis与Hibernate这样的ORM（对象关系映射）框架不同，它更关注SQL本身，适合对数据库操作有较高控制要求的场景。其高效、灵活和简洁的特性，使得它在企业级开发中被广泛使用。</p>
<h2 id="复现环境">复现环境</h2>
<p><a href="https://github.com/j3ers3/Hello-Java-Sec">Hello-Java-Sec</a>
<img src="https://img.l1uyun.one/javasec-sql%E6%B3%A8%E5%85%A5_image_1.png">
<a href="https://github.com/bewhale/JavaSec">JavaSec</a>
<img src="https://img.l1uyun.one/javasec-sql%E6%B3%A8%E5%85%A5_image_2.png"></p>
<h2 id="jdbc-1">JDBC</h2>
<p>JDBC有两个方法执行SQL语句，分别是PrepareStatement和Statement。
JDBCTemplate是Spring对JDBC的封装</p>
<h3 id="statement">Statement</h3>
<p>这就是普通的写法,没有使用预编译</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 采用Statement方法拼接SQL语句，导致注入产生</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">vul1</span>(String<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Class.forName(<span style="color:#a5d6ff">&#34;com.mysql.cj.jdbc.Driver&#34;</span>);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Connection<span style="color:#6e7681"> </span>conn<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>DriverManager.getConnection(db_url,<span style="color:#6e7681"> </span>db_user,<span style="color:#6e7681"> </span>db_pass);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Statement<span style="color:#6e7681"> </span>stmt<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>conn.createStatement();<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#8b949e;font-style:italic">// 拼接语句产生SQL注入</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#6e7681"> </span>sql<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select * from users where id = &#39;&#34;</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span>id<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;&#39;&#34;</span>;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>ResultSet<span style="color:#6e7681"> </span>rs<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>stmt.executeQuery(sql);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>...<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span></code></pre></div><p>报错注入的语法</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>http://127.0.0.1:8888/SQLI/JDBC/vul1?id<span style="color:#ff7b72;font-weight:bold">=</span>1%27%20and%20updatexml<span style="color:#ff7b72;font-weight:bold">(</span>1,concat<span style="color:#ff7b72;font-weight:bold">(</span>0x7e,<span style="color:#ff7b72;font-weight:bold">(</span>SELECT%20user<span style="color:#ff7b72;font-weight:bold">())</span>,0x7e<span style="color:#ff7b72;font-weight:bold">)</span>,1<span style="color:#ff7b72;font-weight:bold">)</span>--%20+
</span></span></code></pre></div><p><img src="https://img.l1uyun.one/javasec-sql%E6%B3%A8%E5%85%A5_image_3.png"></p>
<h3 id="preparestatement">PrepareStatement</h3>
<p>预编译
这里是使用了预编译,但是没有按照预编译的语法来写,没起作用</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// PrepareStatement会对SQL语句进行预编译，但如果直接采取拼接的方式构造SQL，此时进行预编译也无用。</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">vul2</span>(String<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Class.forName(<span style="color:#a5d6ff">&#34;com.mysql.cj.jdbc.Driver&#34;</span>);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Connection<span style="color:#6e7681"> </span>conn<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>DriverManager.getConnection(db_url,<span style="color:#6e7681"> </span>db_user,<span style="color:#6e7681"> </span>db_pass);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#6e7681"> </span>sql<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select * from users where id = &#34;</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span>id;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>PreparedStatement<span style="color:#6e7681"> </span>st<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>conn.prepareStatement(sql);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>ResultSet<span style="color:#6e7681"> </span>rs<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>st.executeQuery();<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span></code></pre></div><p><img src="https://img.l1uyun.one/javasec-sql%E6%B3%A8%E5%85%A5_image_4.png"></p>
<h3 id="jdbctemplate">JDBCTemplate</h3>
<p>也是一样的,如果使用拼接,而不是使用占位符,就会导致SQL注入</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// JDBCTemplate是Spring对JDBC的封装，如果使用拼接语句便会产生注入</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>Map<span style="color:#ff7b72;font-weight:bold">&lt;</span>String,<span style="color:#6e7681"> </span>Object<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">vul3</span>(String<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>DriverManagerDataSource<span style="color:#6e7681"> </span>dataSource<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">new</span><span style="color:#6e7681"> </span>DriverManagerDataSource();<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>...<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>JdbcTemplate<span style="color:#6e7681"> </span>jdbctemplate<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">new</span><span style="color:#6e7681"> </span>JdbcTemplate(dataSource);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#6e7681"> </span>sql_vul<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select * from users where id = &#34;</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span>id;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#8b949e;font-style:italic">// 安全语句</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#8b949e;font-style:italic">// String sql_safe = &#34;select * from users where id = ?&#34;;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#ff7b72">return</span><span style="color:#6e7681"> </span>jdbctemplate.queryForMap(sql_vul);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span></code></pre></div><h3 id="黑名单过滤">黑名单过滤</h3>
<p>修复方法是采用黑名单过滤掉危险字符,当然,最好还是使用预编译的方法</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 采用黑名单过滤危险字符，同时也容易误伤（次方案）</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">static</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">boolean</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">checkSql</span>(String<span style="color:#6e7681"> </span>content)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#ff7b72;font-weight:bold">[]</span><span style="color:#6e7681"> </span>black_list<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>{<span style="color:#a5d6ff">&#34;&#39;&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;;&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;--&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;+&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;,&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;%&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;=&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;&gt;&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;*&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;(&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;)&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;and&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;or&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;exec&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;insert&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;delete&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;update&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;count&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;drop&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;chr&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;mid&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;master&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;truncate&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;char&#34;</span>,<span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;declare&#34;</span>};<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#ff7b72">for</span><span style="color:#6e7681"> </span>(String<span style="color:#6e7681"> </span>s<span style="color:#6e7681"> </span>:<span style="color:#6e7681"> </span>black_list)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span><span style="color:#ff7b72">if</span><span style="color:#6e7681"> </span>(content.toLowerCase().contains(s))<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">            </span><span style="color:#ff7b72">return</span><span style="color:#6e7681"> </span><span style="color:#79c0ff">true</span>;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">        </span>}<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>}<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#ff7b72">return</span><span style="color:#6e7681"> </span><span style="color:#79c0ff">false</span>;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span></code></pre></div><h3 id="使用占位符">使用?占位符</h3>
<p>解决方法就是采用预编译的正确写法,占位符</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 正确的使用PrepareStatement可以有效避免SQL注入，使用？作为占位符，进行参数化查询</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">safe1</span>(String<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#6e7681"> </span>sql<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select * from users where id = ?&#34;</span>;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>PreparedStatement<span style="color:#6e7681"> </span>st<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>conn.prepareStatement(sql);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>st.setString(1,<span style="color:#6e7681"> </span>id);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>ResultSet<span style="color:#6e7681"> </span>rs<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>st.executeQuery();<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span></code></pre></div><h3 id="使用esapi过滤输入">使用ESAPI过滤输入</h3>
<p>安全写法是使用ESAPI来对输入进行过滤,当然使用占位符就可以了</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// ESAPI 是一个免费、开源的、网页应用程序安全控件库，它使程序员能够更容易写出更低风险的程序</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#8b949e;font-style:italic">// 官网：https://owasp.org/www-project-enterprise-security-api/</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">safe3</span>(String<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Codec<span style="color:#ff7b72;font-weight:bold">&lt;</span>Character<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span>oracleCodec<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#ff7b72">new</span><span style="color:#6e7681"> </span>OracleCodec();<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>Statement<span style="color:#6e7681"> </span>stmt<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>conn.createStatement();<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#6e7681"> </span>sql<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select * from users where id = &#39;&#34;</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span>ESAPI.encoder().encodeForSQL(oracleCodec,<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;&#39;&#34;</span>;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>ResultSet<span style="color:#6e7681"> </span>rs<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span>stmt.executeQuery(sql);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">                    
</span></span></span></code></pre></div><h3 id="强制参数类型">强制参数类型</h3>
<p>不使用string类型的参数,而是写死类型,那样也能避免sql注入</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 如果参数类型为boolean,byte,short,int,long,float,double等，sql语句无法拼接字符串，因此不存在注入</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>Map<span style="color:#ff7b72;font-weight:bold">&lt;</span>String,<span style="color:#6e7681"> </span>Object<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">safe4</span>(Integer<span style="color:#6e7681"> </span>id)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>String<span style="color:#6e7681"> </span>sql<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#6e7681"> </span><span style="color:#a5d6ff">&#34;select * from users where id = &#34;</span><span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">+</span><span style="color:#6e7681"> </span>id;<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#ff7b72">return</span><span style="color:#6e7681"> </span>jdbctemplate.queryForMap(sql);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span></code></pre></div><h3 id="总结">总结</h3>
<p>-jdbc
出现SQL注入的条件是
1、采用Statement方法拼接SQL语句
2、PrepareStatement会对SQL语句进行预编译，但如果直接采取拼接的方式构造SQL，此时进行预编译也无用。
3、JDBCTemplate是Spring对JDBC的封装，如果使用拼接语句便会产生注入</p>
<p>安全写法：SQL语句占位符（?） + PrepareStatement预编译</p>
<h2 id="mybatis-1">Mybatis</h2>
<p>MyBatis框架底层已经实现了对SQL注入的防御，但存在使用不当的情况下，仍然存在SQL注入的风险。
MyBatis支持两种参数符号，一种是#，另一种是$，#使用预编译，$使用拼接SQL。</p>
<p>这里的问题主要是使用#{}的问题,使用#{}之后,传进来的参数会被转成带双引号的字符串,导致sql语句错误,开发偷懒就使用了${}进行拼接处理.</p>
<h3 id="order-by-注入">order by 注入</h3>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 由于使用#{}会将对象转成字符串，形成order by &#34;user&#34; desc造成错误，因此很多研发会采用${}来解决，从而造成SQL注入</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#d2a8ff;font-weight:bold">@GetMapping</span>(<span style="color:#a5d6ff">&#34;/vul/order&#34;</span>)<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72">public</span><span style="color:#6e7681"> </span>List<span style="color:#ff7b72;font-weight:bold">&lt;</span>User<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">orderBy</span>(String<span style="color:#6e7681"> </span>field,<span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span>sort)<span style="color:#6e7681"> </span>{<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span><span style="color:#ff7b72">return</span><span style="color:#6e7681"> </span>userMapper.orderBy(field,<span style="color:#6e7681"> </span>sort);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>}<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#8b949e;font-style:italic">// xml方式</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72;font-weight:bold">&lt;</span>select<span style="color:#6e7681"> </span>id<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#34;orderBy&#34;</span><span style="color:#6e7681"> </span>resultType<span style="color:#ff7b72;font-weight:bold">=</span><span style="color:#a5d6ff">&#34;com.best.hello.entity.User&#34;</span><span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">    </span>select<span style="color:#6e7681"> </span><span style="color:#ff7b72;font-weight:bold">*</span><span style="color:#6e7681"> </span>from<span style="color:#6e7681"> </span>users<span style="color:#6e7681"> </span>order<span style="color:#6e7681"> </span>by<span style="color:#6e7681"> </span>${field}<span style="color:#6e7681"> </span>${sort}<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#ff7b72;font-weight:bold">&lt;/</span>select<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#8b949e;font-style:italic">// 注解方式</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#d2a8ff;font-weight:bold">@Select</span>(<span style="color:#a5d6ff">&#34;select * from users order by ${field} desc&#34;</span>)<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>List<span style="color:#ff7b72;font-weight:bold">&lt;</span>User<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">orderBy2</span>(<span style="color:#d2a8ff;font-weight:bold">@Param</span>(<span style="color:#a5d6ff">&#34;field&#34;</span>)<span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span>field);<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">                    
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>http://127.0.0.1:8888/SQLI/MyBatis/vul/order?field<span style="color:#ff7b72;font-weight:bold">=</span>id&amp;<span style="color:#79c0ff">sort</span><span style="color:#ff7b72;font-weight:bold">=</span>desc,1
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72;font-weight:bold">[{</span><span style="color:#a5d6ff">&#34;id&#34;</span>:2,<span style="color:#a5d6ff">&#34;user&#34;</span>:<span style="color:#a5d6ff">&#34;admin&#34;</span>,<span style="color:#a5d6ff">&#34;pass&#34;</span>:<span style="color:#a5d6ff">&#34;password&#34;</span><span style="color:#ff7b72;font-weight:bold">}</span>,<span style="color:#ff7b72;font-weight:bold">{</span><span style="color:#a5d6ff">&#34;id&#34;</span>:1,<span style="color:#a5d6ff">&#34;user&#34;</span>:<span style="color:#a5d6ff">&#34;zhangwei&#34;</span>,<span style="color:#a5d6ff">&#34;pass&#34;</span>:<span style="color:#a5d6ff">&#34;123456&#34;</span><span style="color:#ff7b72;font-weight:bold">}]</span>
</span></span></code></pre></div><h3 id="搜索框注入">搜索框注入</h3>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>// 模糊搜索时，直接使用<span style="color:#a5d6ff">&#39;%#{q}%&#39;</span> 会报错，部分研发图方便直接改成<span style="color:#a5d6ff">&#39;%${q}%&#39;</span>从而造成注入
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>@Select<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;select * from users where user like &#39;%</span><span style="color:#a5d6ff">${</span><span style="color:#79c0ff">q</span><span style="color:#a5d6ff">}</span><span style="color:#a5d6ff">%&#39;&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>List&lt;User&gt; search<span style="color:#ff7b72;font-weight:bold">(</span>String q<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>// 安全代码,采用concat
</span></span><span style="display:flex;"><span>@Select<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;select * from users where user like concat(&#39;%&#39;,#{q},&#39;%&#39;)&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>List&lt;User&gt; search<span style="color:#ff7b72;font-weight:bold">(</span>String q<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span></code></pre></div><h3 id="in-注入">in 注入</h3>
<p>这里也是使用了${}来进行了拼接,会导致错误</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    @RequestMapping<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;/in&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>    public String in<span style="color:#ff7b72;font-weight:bold">(</span>String ids, Model model<span style="color:#ff7b72;font-weight:bold">)</span> <span style="color:#ff7b72;font-weight:bold">{</span>
</span></span><span style="display:flex;"><span>        try <span style="color:#ff7b72;font-weight:bold">{</span>
</span></span><span style="display:flex;"><span>//            List&lt;String&gt; <span style="color:#79c0ff">list</span> <span style="color:#ff7b72;font-weight:bold">=</span> Arrays.asList<span style="color:#ff7b72;font-weight:bold">(</span>ids.split<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;,&#34;</span><span style="color:#ff7b72;font-weight:bold">))</span>;
</span></span><span style="display:flex;"><span>//            ArrayList&lt;Admin&gt; <span style="color:#79c0ff">adminList</span> <span style="color:#ff7b72;font-weight:bold">=</span> injectService.in<span style="color:#ff7b72;font-weight:bold">(</span>list<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span>            ArrayList&lt;Admin&gt; <span style="color:#79c0ff">adminList</span> <span style="color:#ff7b72;font-weight:bold">=</span> injectService.in<span style="color:#ff7b72;font-weight:bold">(</span>ids<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span>            model.addAttribute<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;userInfo&#34;</span>, adminList<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72;font-weight:bold">}</span> catch <span style="color:#ff7b72;font-weight:bold">(</span>Exception e<span style="color:#ff7b72;font-weight:bold">)</span> <span style="color:#ff7b72;font-weight:bold">{</span>
</span></span><span style="display:flex;"><span>            e.printStackTrace<span style="color:#ff7b72;font-weight:bold">()</span>;
</span></span><span style="display:flex;"><span>            model.addAttribute<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;results&#34;</span>, e.toString<span style="color:#ff7b72;font-weight:bold">())</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72;font-weight:bold">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ff7b72">return</span> <span style="color:#a5d6ff">&#34;basevul/sqli/mybatis_in&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#ff7b72;font-weight:bold">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    //  正确安全写法
</span></span><span style="display:flex;"><span>    //  @Select<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;&lt;script&gt;&#34;</span> + <span style="color:#a5d6ff">&#34;SELECT * FROM users WHERE id IN &#34;</span> + <span style="color:#a5d6ff">&#34;&lt;foreach item=&#39;item&#39; index=&#39;index&#39; collection=&#39;ids&#39; open=&#39;(&#39; separator=&#39;,&#39; close=&#39;)&#39;&gt;&#34;</span> + <span style="color:#a5d6ff">&#34;#{item}&#34;</span> + <span style="color:#a5d6ff">&#34;&lt;/foreach&gt;&#34;</span> + <span style="color:#a5d6ff">&#34;&lt;/script&gt;&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>    //  ArrayList&lt;Admin&gt; in<span style="color:#ff7b72;font-weight:bold">(</span>@Param<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;ids&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span> List&lt;String&gt; ids<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span>    @Select<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;Select * from users where id in (</span><span style="color:#a5d6ff">${</span><span style="color:#79c0ff">ids</span><span style="color:#a5d6ff">}</span><span style="color:#a5d6ff">)&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span>
</span></span><span style="display:flex;"><span>    ArrayList&lt;Admin&gt; in<span style="color:#ff7b72;font-weight:bold">(</span>@Param<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#a5d6ff">&#34;ids&#34;</span><span style="color:#ff7b72;font-weight:bold">)</span> String ids<span style="color:#ff7b72;font-weight:bold">)</span>;
</span></span><span style="display:flex;"><span><span style="color:#ff7b72;font-weight:bold">}</span>
</span></span></code></pre></div><h3 id="使用排序映射">使用排序映射</h3>
<p>安全写法是在xml中使用排序映射</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#7ee787">&lt;select</span> id=<span style="color:#a5d6ff">&#34;orderBySafe&#34;</span> resultType=<span style="color:#a5d6ff">&#34;com.best.hello.entity.User&#34;</span><span style="color:#7ee787">&gt;</span>
</span></span><span style="display:flex;"><span>    select * from users
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&lt;choose&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&lt;when</span> test=<span style="color:#a5d6ff">&#34;field == &#39;id&#39;&#34;</span><span style="color:#7ee787">&gt;</span>
</span></span><span style="display:flex;"><span>            order by id desc
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&lt;/when&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&lt;when</span> test=<span style="color:#a5d6ff">&#34;field == &#39;user&#39;&#34;</span><span style="color:#7ee787">&gt;</span>
</span></span><span style="display:flex;"><span>            order by user desc
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&lt;/when&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&lt;otherwise&gt;</span>
</span></span><span style="display:flex;"><span>            order by id desc
</span></span><span style="display:flex;"><span>        <span style="color:#7ee787">&lt;/otherwise&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#7ee787">&lt;/choose&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#7ee787">&lt;/select&gt;</span>
</span></span></code></pre></div><h3 id="使用">使用#</h3>
<p>使用Mybatis作为持久层框架，应通过#{}语法进行参数绑定，MyBatis 会创建 PreparedStatement 参数占位符，并通过占位符安全地设置参数。</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 使用 #{} 安全编码</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#d2a8ff;font-weight:bold">@Select</span>(<span style="color:#a5d6ff">&#34;select * from users where user like CONCAT(&#39;%&#39;, #{user}, &#39;%&#39;)&#34;</span>)<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>List<span style="color:#ff7b72;font-weight:bold">&lt;</span>User<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">queryByUser</span>(<span style="color:#d2a8ff;font-weight:bold">@Param</span>(<span style="color:#a5d6ff">&#34;user&#34;</span>)<span style="color:#6e7681"> </span>String<span style="color:#6e7681"> </span>user);<span style="color:#6e7681">
</span></span></span></code></pre></div><h3 id="强制参数类型-1">强制参数类型</h3>
<p>安全写法,强制类型</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#8b949e;font-style:italic">// 使用 ${} 本身是存在注入的，但由于强制使用Integer或long类型导致注入无效（无法注入字符串）</span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span><span style="color:#d2a8ff;font-weight:bold">@Select</span>(<span style="color:#a5d6ff">&#34;select * from users where id = ${id}&#34;</span>)<span style="color:#6e7681">
</span></span></span><span style="display:flex;"><span><span style="color:#6e7681"></span>List<span style="color:#ff7b72;font-weight:bold">&lt;</span>User<span style="color:#ff7b72;font-weight:bold">&gt;</span><span style="color:#6e7681"> </span><span style="color:#d2a8ff;font-weight:bold">queryById2</span>(<span style="color:#d2a8ff;font-weight:bold">@Param</span>(<span style="color:#a5d6ff">&#34;id&#34;</span>)<span style="color:#6e7681"> </span>Integer<span style="color:#6e7681"> </span>id);<span style="color:#6e7681">
</span></span></span></code></pre></div><h3 id="总结-1">总结</h3>
<p>-MyBatis
MyBatis支持两种参数符号，一种是#，另一种是$，#使用预编译，$使用拼接SQL。
1、order by注入：由于使用#{}会将对象转成字符串，形成order by &ldquo;user&rdquo; desc造成错误，因此很多研发会采用${}来解决，从而造成注入.
2、like 注入：模糊搜索时，直接使用&rsquo;%#{q}%&rsquo; 会报错，部分研发图方便直接改成&rsquo;%${q}%&lsquo;从而造成注入.
3、in注入：in之后多个id查询时使用 # 同样会报错，从而造成注入.</p>
<h1 id="一句话总结">一句话总结</h1>
<p>在写sql语句时使用预编译,并且正确使用占位符,不要直接进行拼接处理</p>
<h1 id="引用">引用</h1>
<p>小迪sec java安全</p>
]]></content></item><item><title>oracle-padding-attack</title><link>https://l1uyun.one/posts/2024/07/oracle-padding-attack/</link><pubDate>Tue, 16 Jul 2024 00:00:00 +0000</pubDate><guid>https://l1uyun.one/posts/2024/07/oracle-padding-attack/</guid><description>在打tryhackme的New-York-Flankees房间的时候遇见了这个攻击方式,没见过,学习一下 前置知识 块密码 在分组密码加密领域，数</description><content type="html"><![CDATA[<p>在打tryhackme的New-York-Flankees房间的时候遇见了这个攻击方式,没见过,学习一下</p>
<h2 id="前置知识">前置知识</h2>
<h3 id="块密码">块密码</h3>
<p>在分组密码加密领域，数据一次加密一个块，不同算法的块长度各不相同。
当要加密的数据长度不是块长度的倍数时，就需要填充。</p>
<p>高级加密标准 (AES)
数据加密标准 (DES)
三重数据加密标准 (3DES)
Blowfish
Twofish
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_1.png"></p>
<h3 id="填充方案">填充方案</h3>
<p>如前所述，分组密码采用固定大小的块，当明文不是块大小的倍数时需要填充。存在多种填充技术，但在本次攻击中，我们的重点是 PKCS#7。</p>
<h4 id="pkcs7">PKCS#7</h4>
<p>公钥加密标准 #7 (PKCS#7) 是一种广泛认可的加密标准，它定义了一种填充方案，用于在需要固定块大小的块密码模式中加密之前填充最后一个明文块。
考虑一个情况,块大小为8,需要填充的单词为Exploit,attack,cyber,hack
对于Exploit,需要填充一个字节,所以填充0x01
对于attack,需要填充两个字节,所以填充0x02,0x02
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_2.png">
另一种情况,正好以及占据了8个字节,就会另起一个块
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_3.png"></p>
<h3 id="块密码模式">块密码模式</h3>
<p>分组密码的另一个重要方面是操作模式。
由于分组密码对固定大小的数据块进行操作，因此在处理超过块长度的明文数据时会出现挑战。
各种操作模式解决了这个问题，允许对不同长度的消息进行加密和解密。一些常用的模式包括：
Electronic Codebook (ECB) Mode
Cipher Block Chaining (CBC) Mode
Counter (CTR) Mode
任何算法都可以采用这些模式；
例如，您可能会遇到 AES-CBC 或 DES-CBC。
在oracle padding中，我们的重点是密码块链接（CBC）模式。</p>
<h4 id="cbc">CBC</h4>
<p>一般来说CBC采用两个操作,一个是加密,一个是异或操作
第一块明文,加密之后与初始向量异或,第二块明文加密之后,与第一块密文相异或&hellip;这种方案,即使明文相同,由于初始向量是不同的,密文最终也是不同的
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_4.png">
解密的时候
首先将最后一块密文C[-1],使用解密算法解密,得到伪明文M[-1],然后将伪明文M[-1]与倒数第二块密文C[-2]进行异或,得到明文P[-1]
先解密,然后再异或
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_5.png"></p>
<h3 id="异或运算">异或运算</h3>
<p>异或操作具有逆运算特性,即已知结果和一个操作数,就能退出来另外一个操作数</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>A^B<span style="color:#ff7b72;font-weight:bold">=</span>C    
</span></span><span style="display:flex;"><span><span style="color:#79c0ff">在等号两边同时异或一个B</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72;font-weight:bold">=</span>&gt;  <span style="color:#79c0ff">A</span><span style="color:#ff7b72;font-weight:bold">=</span>C^B
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#79c0ff">在等号两边同时异或一个B</span>
</span></span><span style="display:flex;"><span><span style="color:#ff7b72;font-weight:bold">=</span>&gt;  <span style="color:#79c0ff">B</span><span style="color:#ff7b72;font-weight:bold">=</span>C^A
</span></span></code></pre></div><h2 id="漏洞检测">漏洞检测</h2>
<p>当密文值被修改之后,服务器不能正确的恢复明文时,会有报错信息回显出来
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_6.png"></p>
<h2 id="攻击原理">攻击原理</h2>
<p>这里假设一个情形
假设加密算法为 AES，表示块大小为 16 字节，则初始化向量 (IV) 也是 16 字节。</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#ff7b72">if</span> <span style="color:#79c0ff">__name__</span> <span style="color:#ff7b72;font-weight:bold">==</span> <span style="color:#a5d6ff">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#79c0ff">encrypted_data</span> <span style="color:#ff7b72;font-weight:bold">=</span> b<span style="color:#a5d6ff">&#39;31323334353637383930313233343536f044039223b4b9aea7bc48cd1be80682&#39;</span>
</span></span><span style="display:flex;"><span>    oracle_padding<span style="color:#ff7b72;font-weight:bold">(</span><span style="color:#79c0ff">ciphertext</span><span style="color:#ff7b72;font-weight:bold">=</span>encrypted_data<span style="color:#ff7b72;font-weight:bold">)</span>
</span></span></code></pre></div><p>在许多实现中，IV 与消息一起传输。这里假设encrypted_data的前面十六个字节表示IV值,其他值是Cookie</p>
<p>对于每个密文块而言,先将密文解密成伪明文,然后与IV(对于其他的密文块而言,IV就是前面一个密文块)进行异或,得到明文
<img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_7.png">
这里如果我们修改IV值,就能够改变服务器那边解密出来的明文值,而服务器出现解密失败的话,会有填充错误的信息回显出来,(<em>这是漏洞产生的条件</em>)表明服务器检查了解密出来的明文的最后一个字节并将其识别为无效的填充字节。
如果我们尝试对IV进行逐个字节的修改,来让解密之后的明文的填充字节有效(并且我们是知道的),就能逐个字节的解密出来中间的伪明文,最后通过与已知的IV异或,就能得到明文值</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>步骤:
</span></span><span style="display:flex;"><span>初始化：我们从IV的最后一个字节（第16个字节）开始。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>逐步修改：将IV的第16个字节增加1，然后发送修改后的密文或IV进行解密。如果服务器返回填充无效错误，继续增加该字节的值。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>填充有效：当服务器不再返回填充无效错误时，表示填充是有效的。根据PKCS#7填充规则，这意味着解密后的伪明文的最后一个字节是0x01。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>推导明文：通过异或操作推导出密文对应位置的伪明文值。例如，如果IV的最后一个字节是0x35，且解密后伪明文的最后一个字节是0x01，则0x35 ^ <span style="color:#79c0ff">0x01</span> <span style="color:#ff7b72;font-weight:bold">=</span> 明文的最后一个字节。
</span></span></code></pre></div><h3 id="恢复伪明文">恢复伪明文</h3>
<p>我们从 IV 的最后一个字节（IV 的第 16 个字节）开始。将其增加 1，我们重新发送修改后的 cookie 进行解密。再次收到错误，表明填充无效。我们重复这个过程，直到服务器不再发送填充错误。发生这种情况时，表示填充正确，表明明文的最后一个字节的字节值为 0x01.</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Keystream<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> IV<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> ^ 0x01
</span></span><span style="display:flex;"><span>Keystream<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x35 ^ <span style="color:#79c0ff">0x01</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x34
</span></span></code></pre></div><p><img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_8.png"></p>
<p>接下来，我们对 IV 的倒数第二个字节（IV 的第 15 个字节）重复相同的过程，挑战是相同的，我们需要猜测 IV 值并将它们发送到服务器，直到我们不再遇到填充错误,即填充的字节为0x02。不过，现在不同的是，我们要求明文的最后两个字节是0x02和0x02。
对于最后一个字节，我们已经知道了伪明文的值,可以通过简单的异或运算来解决。</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>IV<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> ^ Keystream<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x02
</span></span><span style="display:flex;"><span>IV<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> ^ <span style="color:#79c0ff">0x34</span> <span style="color:#ff7b72;font-weight:bold">=</span> <span style="color:#79c0ff">0x02</span> <span style="color:#ff7b72;font-weight:bold">=</span>&gt; IV<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x36
</span></span></code></pre></div><p>然而，对于倒数第二个字节，我们需要尝试所有可能的值。从 0x00 开始递增，直到没有错误为止，我们发现 IV 字节是 0x35。</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Keystream<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> IV<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span> ^ 0x02
</span></span><span style="display:flex;"><span>Keystream<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x35 ^ <span style="color:#79c0ff">0x02</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x37
</span></span></code></pre></div><p><img src="https://img.l1uyun.one/202407160948_oracle-padding-attack_image_9.png">
&hellip;重复上述过程,直到恢复所有的伪明文</p>
<h3 id="恢复明文">恢复明文</h3>
<p>第二阶段很简单,我们已经有了原始的IV值,和解密出来的伪明文,直接异或就能得到明文</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Plaintext<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> IV<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> ^ Keystream<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span>Plaintext<span style="color:#ff7b72;font-weight:bold">[</span>15<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x36 ^ <span style="color:#79c0ff">0x34</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x2 -&gt; padding no ASCII
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Plaintext<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> IV<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span> ^ Keystream<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span>Plaintext<span style="color:#ff7b72;font-weight:bold">[</span>14<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x35 ^ <span style="color:#79c0ff">0x37</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x2 -&gt; padding no ASCII
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Plaintext<span style="color:#ff7b72;font-weight:bold">[</span>13<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> IV<span style="color:#ff7b72;font-weight:bold">[</span>13<span style="color:#ff7b72;font-weight:bold">]</span> ^ Keystream<span style="color:#ff7b72;font-weight:bold">[</span>13<span style="color:#ff7b72;font-weight:bold">]</span>
</span></span><span style="display:flex;"><span>Plaintext<span style="color:#ff7b72;font-weight:bold">[</span>13<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x34 ^ <span style="color:#79c0ff">0x15</span> <span style="color:#ff7b72;font-weight:bold">=</span> 0x21 -&gt; convert to ASCII !
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="疑惑与解决">疑惑与解决</h2>
<p>密码学还是接触的太少了&hellip;</p>
<p>我们假设C1|C2,我们要解密C2,
假设明文P2的最后两个字节是0x02,0x02,即填充字节是2个0x02
C1的最后一个字节C1[-1]是0x01,伪明文M2[-1]是0x01^0x02=0x03</p>
<p>我的疑惑是,如果从0x00开始修改C1[-1].会不会在让明文的最后一个字节为0x01之前,提前让解密之后的明文的最后一个字节为0x02,那样子也能够返回填充正确,但是这种情况下我们不能确定明文末尾的填充值.就不能得到伪明文的值了
根据计算</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>M2<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">0000</span> <span style="color:#a5d6ff">0011</span>
</span></span><span style="display:flex;"><span>C1<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">0000</span> <span style="color:#a5d6ff">0000</span>  
</span></span><span style="display:flex;"><span>这里得到的P<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span>是0x03,填充失败
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>M2<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">0000</span> <span style="color:#a5d6ff">0011</span>
</span></span><span style="display:flex;"><span>C1<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">0000</span> <span style="color:#a5d6ff">0001</span> 
</span></span><span style="display:flex;"><span>这里得到的P<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span>是0x02,填充成功了...但是我们需要的是0x01时成功
</span></span></code></pre></div><p>但是如果不是从0x00开始修改,而是从他最开始的值+1开始</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>M2<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">0000</span> <span style="color:#a5d6ff">0011</span>
</span></span><span style="display:flex;"><span>C1<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">0000</span> <span style="color:#a5d6ff">0010</span>  
</span></span><span style="display:flex;"><span>最开始是0x01.从加1开始就是0x02了,这样就能确保得到0x01的明文填充值
</span></span></code></pre></div><p>继续假设P2末尾序列是0x03,0x03,0x03
C1[-1]的值是0xfa,那么伪明文M2[-1]的值就是0xff</p>
<div class="highlight"><pre tabindex="0" style="color:#e6edf3;background-color:#0d1117;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>M2<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">1111</span> <span style="color:#a5d6ff">1111</span>
</span></span><span style="display:flex;"><span>C1<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">1111</span> <span style="color:#a5d6ff">1101</span>
</span></span><span style="display:flex;"><span>从0xfb开始进行枚举  0x02,填充失败
</span></span><span style="display:flex;"><span>M2<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">1111</span> <span style="color:#a5d6ff">1111</span>
</span></span><span style="display:flex;"><span>C1<span style="color:#ff7b72;font-weight:bold">[</span>-1<span style="color:#ff7b72;font-weight:bold">]</span> <span style="color:#a5d6ff">1111</span> <span style="color:#a5d6ff">1110</span> 
</span></span><span style="display:flex;"><span>0x01,填充成功
</span></span></code></pre></div><p>我现在的理解是这样的机制,确保了不会提前得到原本的填充值.
密码学让我头大&hellip;.</p>
<h1 id="一句话总结">一句话总结</h1>
<p>通过修改IV值的末尾字节,来控制解密之后的明文的末尾字节为填充字节,从而获得中间值,进而获取明文</p>
<h1 id="引用">引用</h1>
<p><a href="https://medium.com/@masjadaan/oracle-padding-attack-a61369993c86">Oracle Padding Attack</a>
<a href="https://book.hacktricks.xyz/crypto-and-stego/padding-oracle-priv">hacktricks_Padding Oracle</a></p>
]]></content></item><item><title>&lt;% tp.file.title %></title><link>https://l1uyun.one/posts/1/01/tp.file.title/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://l1uyun.one/posts/1/01/tp.file.title/</guid><description/><content type="html"></content></item></channel></rss>